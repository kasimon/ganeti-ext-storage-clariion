#!/usr/bin/env python
# -*- coding: utf-8 -*-

#  Version : 0.1
#  Author  : regnauld@nsrc.org for KENET
#  Derived from Uni Rennes 2 work

##
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

# Based on Ganeti EXtStorageProviders code (https://code.grnet.gr/projects/extstorage)

"""
Maps an existing EMC Clariion VD to a block device
This program maps an existing LUN to a block device
e.g. /dev/mapper/{X} and returns the device path. If the mapping
already exists, it returns the corresponding device path.
It takes its input from environment variables. Specifically the
following variables should be present:

 - VOL_NAME : Ganeti name (uuid + ext + disk#)
 - EXTP_NAME: VD_NAME

Returns the block device path (which maps the Image) as a string
upon success, or 1 upon failure"""

import os
import re
import sys
import socket
import time
import ConfigParser
import subprocess

sys.path.append("/usr/share/ganeti/default")

from ganeti import utils

#Config
#config_file = "/etc/ganeti/extstorage/clariion.conf"
config_file = "./clariion.conf.local"
config = ConfigParser.SafeConfigParser()
if not config.read(config_file):
   raise ConfigParser.Error("Unable to read config file")

e_storage         = config.get('clariion','storage')
e_naviseccli_path = config.get('clariion','naviseccli_path')

def ReadEnv():
  """Read the mandatory enviromental variables
  """

  if os.getenv("EXTP_NAME") is None :
    name = os.getenv("VOL_NAME")
  else :
    name = os.getenv("EXTP_NAME")

  if name is None:
    sys.stderr.write('The environment variable VOL_NAME is missing.\n')
    sys.exit(1)
  return (name)

def main():
  sys.stderr.write('Attachment started...\n')
  env = ReadEnv()
  if env is None:
    sys.stderr.write('Wrong environment. Aborting...\n')
    sys.exit(1)

  vd_name = env

  sys.stderr.write('name: %s\n' % (vd_name))

  # Find our hostname (alternatively: utils.RunCmd("hostname -s"))
  hostname = socket.gethostname()

  # Find the lun id of the name we want to attach
  # Map to storage group named like host with HLU = ALU

  # Find ALU and UUID of the LUN, by name

  cmd = "%s -h %s lun -list -name %s -uid" % (e_naviseccli_path, e_storage, vd_name)

  result = utils.RunCmd(cmd)

  # Debug
  # print cmd
  # print result.output

  if result.failed:
    sys.stderr.write('LUN lookup failed (%s): %s\n' %
                     (result.fail_reason, result.output))
    return 1

  # Find ALU
  pattern_alu = re.compile('LOGICAL UNIT NUMBER (\d)')
  alu = pattern_alu.findall(result.output)[0]
  print alu

  # Find UID
  pattern_uid = re.compile('UID:\s+(.*)')
  lun_uid_raw = pattern_uid.findall(result.output)[0]
  lun_uid_raw0 = lun_uid_raw.lower() 
  lun_uid = lun_uid_raw0.replace(':','')

  # XXX assumed to be static
  print '3' + lun_uid

  # We have found the ALU (LUN UNIT NUMBER as viewed by the storage box)
  # Let's map this to the storage group named like the host (expected to exist)
  cmd = "%s -h %s storagegroup -addhlu -gname %s -alu %s -hlu %s" % (e_naviseccli_path, e_storage, hostname, alu, alu)

  result = utils.RunCmd(cmd)

  # Debug
  print cmd
  print result.output 

  if result.failed:
    sys.stderr.write('LUN mapping failed (%s): %s\n' %
                     (result.fail_reason, result.output))
    return 1

  # Issue LIP to all FC adapters
  cmd = 'ls -d /sys/class/fc_host/host*/issue_lip | xargs -i echo "echo 1 > {}" | sh'
  result = utils.RunCmd(cmd)

  # Debug
  print cmd
  print result.output

  # This seems to make it happen
  cmd = "multipath"
  print cmd
  utils.RunCmd(cmd)
  # Give time for multipath to find the device
  time.sleep(5)

  #Get multipath device
  cmd = "multipath -ll 3%s | head -1 | awk '{print $1}'" % lun_uid
  print cmd
  device = utils.RunCmd(cmd)
 
  sys.stdout.write("/dev/mapper/%s" % device.output.strip())
  sys.exit(0)


if __name__ == "__main__":
    sys.exit(main())
