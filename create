#!/usr/bin/env python
# -*- coding: utf-8 -*-

#  Version : 0.1
#  Author  : Sylvain Costard <at> univ-rennes2.fr
#  Universit√© Rennes 2
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

# Based on Ganeti EXtStorageProviders code (https://code.grnet.gr/projects/extstorage)

"""Create a new Image inside a HP EVA 
This program creates a new Image VD file inside a HP EVA.
It takes it's input from environment variables. Specifically the
following variables should be present:

 - VOL_NAME        : The UUID of the new Image file
 - VOL_SIZE        : The size of the new Image (in megabytes)

Return O after successfull creation, 1 on failure

"""

import os
import sys
import ConfigParser

sys.path.append("/usr/share/ganeti/default")

from ganeti import utils

#Config
config_file = "/etc/ganeti/extstorage/clariion.conf"
#config_file = "./clariion.conf.local"
config = ConfigParser.SafeConfigParser()
if not config.read(config_file):
   raise ConfigParser.Error("Unable to read config file")

e_storage         = config.get('clariion','storage')
e_poolname        = config.get('clariion','poolname')
e_naviseccli_path = config.get('clariion','naviseccli_path')
e_sp              = config.get('clariion','sp')
e_type            = config.get('clariion','type')

def ReadEnv():
  """Read the mandatory enviromental variables

  """

  if os.getenv("EXTP_NAME") is None :  
    name = os.getenv("VOL_NAME")
  else :
    name = os.getenv("EXTP_NAME")

  if name is None:
    sys.stderr.write('The environment variable VOL_NAME is missing.\n')
    sys.exit(1)

  size = str(int(os.getenv("VOL_SIZE")) // 1024)
  if size is None:
    sys.stderr.write('The environment variable VOL_SIZE is missing.\n')
    sys.exit(1)

  return (name, size)

def main():
  sys.stderr.write('Creation started...\n')
  env = ReadEnv()

  if env is None:
    sys.stderr.write('Wrong environment. Aborting...\n')
    sys.exit(1)

  vd_name, vd_size = env

  sys.stderr.write('name: %s, size: %s\n' % (vd_name, vd_size))

  # Create VD
  cmd = ["%s" % e_naviseccli_path, "-h %s" % e_storage, "lun -create -type %s" % e_type, "-capacity %s" % vd_size,
	"-sq mb -sp %s " % e_sp, "-poolname %s" % e_poolname, "-name %s" % vd_name]

  cmd_string = " ".join(cmd)

  print(cmd)
  print(cmd_string)

  result = utils.RunCmd(cmd_string)

  if result.failed:
    sys.stderr.write('VD creation failed (%s): %s\n' %
                     (result.fail_reason, result.output))
    return 1

  return 0


if __name__ == "__main__":
    sys.exit(main())
