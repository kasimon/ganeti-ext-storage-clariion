#!/usr/bin/env python
# -*- coding: utf-8 -*-

#  Version : 0.1
#  Author  : regnauld@nsrc.org for KENET
#  Derived from Uni Rennes 2 work
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

# Based on Ganeti EXtStorageProviders code (https://code.grnet.gr/projects/extstorage)

"""destroy an existing LUN from an EMC Clariion
This program removes an existing LUN

 - VOL_NAME  : The UUID of the LUN
 - EXTP_NAME : VD_NAME

"""


import os
import sys
import ConfigParser

sys.path.append("/usr/share/ganeti/default")

from ganeti import utils

#Config
#config_file = "/etc/ganeti/extstorage/clariion.conf"
config_file = "./clariion.conf.local"
config = ConfigParser.SafeConfigParser()
if not config.read(config_file):
   raise ConfigParser.Error("Unable to read config file")

e_storage         = config.get('clariion','storage')
e_naviseccli_path = config.get('clariion','naviseccli_path')

def ReadEnv():
  """Read the mandatory enviromental variables

  """

  if os.getenv("EXTP_NAME") is None :
    name = os.getenv("VOL_NAME")
  else :
    name = os.getenv("EXTP_NAME")
  
  if name is None:
    sys.stderr.write('The environment variable VOL_NAME is missing.\n')
    sys.exit(1)
  return (name)

def main():
  sys.stderr.write('Removal of %s ...\n' % os.getenv("VOL_NAME"))
  env = ReadEnv()
  if env is None:
    sys.stderr.write('Wrong environment. Aborting...\n')
    sys.exit(1)

  vd_name = env

  sys.stderr.write('name: %s\n' % (vd_name))

  cmd = "%s -h %s lun -list -name %s -uid | grep UID | sed -e 's|^UID: ||' -e 's|:||g' | tr '[A-Z]' '[a-z]'" % (e_naviseccli_path, e_storage, vd_name)

  result = utils.RunCmd(cmd)
  uuid = result.output

  #Get multipath device
  cmd = "multipath -ll 3%s | head -1 | awk '{print $1}'" % uuid.strip()
  result = utils.RunCmd(cmd)
  device = result.output

  # If device is presented -> quit
  if device.strip():
    sys.stderr.write('Device mapped on %s. Aborting...\n' % device)
    sys.exit(1)

  # Remove LUN
  cmd = "%s -h %s lun -destroy -name %s -o" % (e_naviseccli_path, e_storage, vd_name)
  result = utils.RunCmd(cmd)

  if result.failed:
    sys.stderr.write('VD remove failed (%s): %s\n' %
                     (result.fail_reason, result.output))
    return 1
   
  sys.exit(0)


if __name__ == "__main__":
    sys.exit(main())
