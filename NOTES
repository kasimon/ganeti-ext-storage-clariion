# Primitives for the Clariion (VNX may be different)

## Assumptions:

* we are using a pool (not a raid group), otherwise the 'lun' commands are unavailable.

* one storage group / node! See "Logic" further down

* each node will need to be added to the required storage group

* when mapping HLU, simply use the ALU id. Multipath gets confused when seeing the
  same WWID appearing with different HLUs, but if we destroy a LUN and recreate it
  (thus recycling LUNs as they get autoallocated), then there should be no problem

* the credentials has already been created by a command similar to this

~~~
naviseccli -AddUserSecurity -Scope 1 -User <username>
~~~

You will be prompted for the password used to acccess the storage box
(subsequently specified with `-h`). The username specified is expected
to have been created on the storage system by the administrator.

This command will create ($HOME by default), two files:

* SecuredCLISecurityFile.xml
* SecuredCLIXMLEncrypted.key

## Functions

We need to implement 5 primitives:

create
attach
detach
remove
grow

The actions for each of these:

1. create

- create LUN by name, size

2. attach

- map LUN to storage group (ALU, HLU)
- issue lip

3. detach

- multipath -f
- unmap LUN from storage group
- issue_lip

4. destroy

- destroy LUN

# Create

Example commands:

## Create by pool id (not the pool name), no name given to the LUN

~~~
naviseccli -h HOSTNAME lun -create -type NonThin -capacity 2 -sq gb -poolId 0 -sp A
~~~

## Create by pool name (not the pool id), no name given to the LUN

~~~
naviseccli -h HOSTNAME lun -create -type NonThin -capacity 2 -sq gb -poolName Ganeti-Test-Pool-0 -sp A
~~~

## Create by pool name (not the pool id), explicit naming (VOL_NAME from Ganeti)

~~~
naviseccli -h HOSTNAME lun -create -type NonThin -capacity 2 -sq gb -poolName Ganeti-Test-Pool-0 -sp A -name '84f18ad5-f334-4335-8ffc-55d820c08055.ext.disk0'
~~~

# Attaching

## REMINDER: the process for attaching/detaching is as follows:

1. Create LUN as above
2. Map LUN to HLU/ALU and attach to group as per above. To do so:

    - find lun by name:

~~~
naviseccli -h HOSTNAME lun -list -name NAMEOFLUN -uid
~~~

    - get UID, add 3 in front, i.e.:

~~~
naviseccli -h HOSTNAME lun -list -name blah -uid | grep UID: | sed -e 's|^UID:  ||' -e 's|:||g' | tr '[A-Z]' '[a-z]'
~~~

	map lun to HLU

~~~
naviseccli -h HOSTNAME storagegroup -addhlu -gname NODE_STORAGEGROUP -alu 2 -hlu HLUID
~~~

TODO: need to find a scheme/logic for allocating HLU/ALU.
HLU = seen from the host
ALU = seen from the storage


## Attaching proper :)

## Map the internal lun (ALU) to a HLU (HLU == ALU id)

~~~
naviseccli -h HOSTNAME storagegroup -addhlu -gname NODE_STORAGEGROUP -hlu <host_lun_SCSIID> -alu <CX_lun_ID> 
~~~

1. Issue lip on node that is part of the storage group

~~~
ls -d /sys/class/fc_host/host*/issue_lip | xargs echo 1 > {} \;
~~~


2. Verify the device has appeared

~~~
multipath -ll
~~~

# Destroying

Process:

- unmap by HLU from storage group
- issue a lip
- destroy LUN

1. Remove HLU (unmap)

~~~
naviseccli -h HOSTNAME storagegroup -removehlu -gname NODE_STORAGEGROUP -hlu HLUID -o
~~~

2. 1. Issue lip on node that is part of the storage group

~~
ls -d /sys/class/fc_host/host*/issue_lip | xargs echo 1 > {} \;
~~

3. Destroy using any method below:

## Destroy by number, prompt for confirmation:

naviseccli -h HOSTNAME lun -destroy -l 0
Are you sure you want to perform this operation?(y/n): n

## Destroy by number, no prompt for confirmation:

naviseccli -h HOSTNAME lun -destroy -l 0 -o

## Destroy by name, no prompt for confirmation

naviseccli -h HOSTNAME lun -destroy -name NAME_OF_LUN -o

## Detach

Note: We only care about the -hlu param.

Process:

- unmap by HLU from storage group
- issue a lip
-  remove LUN from multipath

1. Remove HLU (unmap)

~~
naviseccli -h HOSTNAME storagegroup -removehlu -gname NODE_STORAGEGROUP -hlu HLUID -o
~~

2. Issue lip on node that is part of the storage group

~~
ls -d /sys/class/fc_host/host*/issue_lip | xargs echo 1 > {} \;
~~

3. Remove device from multipath

~~~
multipath -f UID/WWNAME
~~~


## Growing (by id, name is similar)

~~~
naviseccli -h HOSTNAME lun -expand -l 0 -capacity 3 -sq gb [-o]
~~~

Notes:

- capacity is an absolute value, and must be greated than the initial capacity

- resizing requires rescanning since the size of the block device has changed,
  i.e.: `issue_lip` ?

Note: see https://help.ubuntu.com/lts/serverguide/multipath-admin-and-troubleshooting.html

... for notes on resizing

Links:

* http://unixadminschool.com/blog/2014/05/red-hat-enterprise-linux-configuring-dm-multipath-for-emc-clariion-san-storage/#

* http://nycstorm.com/nycfiles/repository/hpark/docu5128_Host-Connectivity-Guide-for-Linux.pdf

* https://www.novell.com/support/kb/doc.php?id=7009660


# Logic for the storage provider
                                                    ____ contains____ node_A
                                                   /                          
 LUN 1 ----mapped-to ___   +-- Storage_Group_Node_A                             
                        \ /    
                         X    
 LUN 2 ----mapped-to ___/ \ 
                           +-- Storage_Group_Node_B
                                                   \____ contains____ node_B  
                                                                  

In the example above:

- Each node has its own storage group (CX3 = 512 storage groups, CX3, 2048)
- node_A is in the storage group of the same name
- node_B is in the storage group of the same name
- node A is using lun 2
- node B is using lun 1

# Relations

LUN uuid (block device name is derived from this) <---> multipath name (block device id = HLU)
    ^
    |
    v
LUN id (ALU) <-> HLU
    ^
    |
    v
LUN name
   

